diff --git a/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts b/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts
index e730397..17aef95 100644
--- a/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts
+++ b/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts
@@ -54,10 +54,20 @@ export declare type AnimatedLineGraphProps = BaseLineGraphProps & {
      * The element that gets rendered below the Graph (usually the "min" point/value of the Graph)
      */
     BottomAxisLabel?: () => React.ReactElement | null;
+
+    /**
+     * Hold duration for the graph gesture
+     */
+    gestureHoldDuration?: number
+
+    /**
+     * Wether to reset or not the circle position when releasing the gesture
+     */
+    resetPositionOnRelease?: boolean
 };
 export declare type LineGraphProps = ({
     animated: true;
 } & AnimatedLineGraphProps) | ({
     animated: false;
 } & StaticLineGraphProps);
-export {};
+export { };
diff --git a/node_modules/react-native-graph/src/AnimatedLineGraph.tsx b/node_modules/react-native-graph/src/AnimatedLineGraph.tsx
index 08f2bc4..7271838 100644
--- a/node_modules/react-native-graph/src/AnimatedLineGraph.tsx
+++ b/node_modules/react-native-graph/src/AnimatedLineGraph.tsx
@@ -14,8 +14,9 @@ import {
   Group,
   Shadow,
   PathCommand,
+  useValueEffect,
 } from '@shopify/react-native-skia'
-import type { AnimatedLineGraphProps } from './LineGraphProps'
+import { AnimatedLineGraphProps, GraphPoint } from './LineGraphProps'
 import { createGraphPath } from './CreateGraphPath'
 import Reanimated, {
   runOnJS,
@@ -41,10 +42,13 @@ export function AnimatedLineGraph({
   TopAxisLabel,
   BottomAxisLabel,
   selectionDotShadowColor,
+  gestureHoldDuration = 300,
+  resetPositionOnRelease = true,
   ...props
 }: AnimatedLineGraphProps): React.ReactElement {
   const [width, setWidth] = useState(0)
   const [height, setHeight] = useState(0)
+  const pointsRef = useRef<GraphPoint[]>([]);
   const interpolateProgress = useValue(0)
   const graphPadding = lineThickness
 
@@ -81,6 +85,8 @@ export function AnimatedLineGraph({
       return
     }
 
+    pointsRef.current = points;
+
     const path = createGraphPath({
       points: points,
       graphPadding: graphPadding,
@@ -158,7 +164,10 @@ export function AnimatedLineGraph({
     [interpolateProgress]
   )
 
-  const { gesture, isActive, x } = useHoldOrPanGesture({ holdDuration: 300 })
+  const { gesture, isActive, x } = useHoldOrPanGesture({
+    holdDuration: gestureHoldDuration,
+  })
+
   const circleX = useValue(0)
   const circleY = useValue(0)
   const pathEnd = useValue(0)
@@ -168,6 +177,15 @@ export function AnimatedLineGraph({
     [circleRadius]
   )
 
+  useValueEffect(pathEnd, (pathEndValue) => {
+    const index = Math.round(pathEndValue * pointsRef.current.length)
+    const pointIndex = Math.min(Math.max(index, 0), pointsRef.current.length - 1)
+    const dataPoint = pointsRef.current[Math.round(pointIndex)]
+    if (dataPoint != null && onPointSelected) {
+      runOnJS(onPointSelected)(dataPoint)
+    }
+  })
+
   const setFingerX = useCallback(
     (fingerX: number) => {
       const y = getYForX(commands.current, fingerX)
@@ -177,13 +195,8 @@ export function AnimatedLineGraph({
         circleX.current = fingerX
       }
       pathEnd.current = fingerX / width
-
-      const index = Math.round((fingerX / width) * points.length)
-      const pointIndex = Math.min(Math.max(index, 0), points.length - 1)
-      const dataPoint = points[Math.round(pointIndex)]
-      if (dataPoint != null) onPointSelected?.(dataPoint)
     },
-    [circleX, circleY, onPointSelected, pathEnd, points, width]
+    [circleX, circleY, pathEnd, width]
   )
   const setIsActive = useCallback(
     (active: boolean) => {
@@ -193,17 +206,25 @@ export function AnimatedLineGraph({
         damping: 50,
         velocity: 0,
       })
-      if (!active) pathEnd.current = 1
+      if (!active && resetPositionOnRelease) pathEnd.current = 1
 
       if (active) onGestureStart?.()
       else onGestureEnd?.()
     },
-    [circleRadius, onGestureEnd, onGestureStart, pathEnd]
+    [
+      circleRadius,
+      onGestureEnd,
+      onGestureStart,
+      pathEnd,
+      resetPositionOnRelease,
+    ]
   )
   useAnimatedReaction(
-    () => x.value,
-    (fingerX) => {
-      runOnJS(setFingerX)(fingerX)
+    () => [x.value, isActive.value],
+    ([fingerX, isActiveValue]) => {
+      if (isActiveValue) {
+        runOnJS(setFingerX)(fingerX as number)
+      }
     },
     [isActive, setFingerX, width, x]
   )
@@ -220,11 +241,18 @@ export function AnimatedLineGraph({
       Math.min(0.15, pathEnd.current),
       pathEnd.current,
       pathEnd.current,
+      pathEnd.current,
       1,
     ],
     [pathEnd]
   )
 
+  useEffect(() => {
+    if (width != null) {
+      setFingerX(width)
+    }
+  }, [width, setFingerX])
+
   return (
     <View {...props}>
       <GestureDetector gesture={enablePanGesture ? gesture : undefined}>
diff --git a/node_modules/react-native-graph/src/LineGraphProps.ts b/node_modules/react-native-graph/src/LineGraphProps.ts
index bdfe411..9a3a898 100644
--- a/node_modules/react-native-graph/src/LineGraphProps.ts
+++ b/node_modules/react-native-graph/src/LineGraphProps.ts
@@ -62,6 +62,16 @@ export type AnimatedLineGraphProps = BaseLineGraphProps & {
    * The element that gets rendered below the Graph (usually the "min" point/value of the Graph)
    */
   BottomAxisLabel?: () => React.ReactElement | null
+
+  /**
+   * Hold duration for the graph gesture
+   */
+  gestureHoldDuration?: number
+
+  /**
+   * Wether to reset or not the circle position when releasing the gesture
+   */
+  resetPositionOnRelease?: boolean
 }
 
 export type LineGraphProps =
